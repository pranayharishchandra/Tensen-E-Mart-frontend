import { createSlice } from '@reduxjs/toolkit';
import { updateCart } from '../utils/cartUtils';

// Define the initial state for the cart slice
const initialState = localStorage.getItem('cart')
  ? JSON.parse(localStorage.getItem('cart'))
  : { cartItems: [], shippingAddress: {}, paymentMethod: 'PayPal' };

// Create a cart slice using createSlice function
const cartSlice = createSlice({
  // Name of the slice in the Redux store
  name: 'cart',
  // Initial state of the cart slice
  initialState,
  // Reducer functions to handle state mutations
  reducers: {
    // Add an item to the cart or update its quantity if it already exists
    addToCart: (state, action) => {
      // Extract necessary properties from the action payload
      const { user, rating, numReviews, reviews, ...item } = action.payload;

      // Check if the item already exists in the cart
      const existItem = state.cartItems.find((x) => x._id === item._id);

      // If the item exists, update its quantity, otherwise add it to the cart
      if (existItem) {
        state.cartItems = state.cartItems.map((x) =>
          x._id === existItem._id ? item : x
        );
      } else {
        state.cartItems = [...state.cartItems, item];
      }

      // Update the cart state and calculate prices using the utility function
      return updateCart(state, item);
    },
    // Remove an item from the cart based on its ID
    removeFromCart: (state, action) => {
      // Filter out the item with the specified ID from the cart
      state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);
      // Update the cart state and recalculate prices
      return updateCart(state);
    },
    // Save the shipping address to the cart state and localStorage
    saveShippingAddress: (state, action) => {
      state.shippingAddress = action.payload;
      localStorage.setItem('cart', JSON.stringify(state));
    },
    // Save the selected payment method to the cart state and localStorage
    savePaymentMethod: (state, action) => {
      state.paymentMethod = action.payload;
      localStorage.setItem('cart', JSON.stringify(state));
    },
    // Clear all items from the cart
    clearCartItems: (state, action) => {
      state.cartItems = [];
      localStorage.setItem('cart', JSON.stringify(state));
    },
    // Reset the cart state to its initial state (used when a user logs out)
    resetCart: (state) => (state = initialState),
  },
});

// Extract action creators from the cart slice
export const {
  addToCart,
  removeFromCart,
  saveShippingAddress,
  savePaymentMethod,
  clearCartItems,
  resetCart,
} = cartSlice.actions;

// Export the reducer function generated by createSlice
export default cartSlice.reducer;
